## [Start] Static Group Authorization Checks **
#set( $userGroups = $ctx.identity.claims.get("cognito:groups") )
#set( $allowedGroups = ["Managers"] )
#set($isStaticGroupAuthorized = $util.defaultIfNull($isStaticGroupAuthorized, false))
#foreach( $userGroup in $userGroups )
  #foreach( $allowedGroup in $allowedGroups )
    #if( $allowedGroup == $userGroup )
      #set( $isStaticGroupAuthorized = true )
    #end
  #end
#end
## [End] Static Group Authorization Checks **


#if( ! $isStaticGroupAuthorized )
  ## No Dynamic Group Authorization Rules **


  ## No Owner Authorization Rules **


  ## [Start] Collect Auth Condition **
  #set( $authCondition = {
  "expression": "",
  "expressionNames": {},
  "expressionValues": {}
} )
  #set( $totalAuthExpression = "" )
  ## Add dynamic group auth conditions if they exist **
  #if( $groupAuthExpressions )
    #foreach( $authExpr in $groupAuthExpressions )
      #set( $totalAuthExpression = "$totalAuthExpression $authExpr" )
      #if( $foreach.hasNext )
        #set( $totalAuthExpression = "$totalAuthExpression OR" )
      #end
    #end
  #end
  #if( $groupAuthExpressionNames )
    $util.qr($authCondition.expressionNames.putAll($groupAuthExpressionNames))
  #end
  #if( $groupAuthExpressionValues )
    $util.qr($authCondition.expressionValues.putAll($groupAuthExpressionValues))
  #end
  ## Add owner auth conditions if they exist **
  #if( $totalAuthExpression != "" && $ownerAuthExpressions && $ownerAuthExpressions.size() > 0 )
    #set( $totalAuthExpression = "$totalAuthExpression OR" )
  #end
  #if( $ownerAuthExpressions )
    #foreach( $authExpr in $ownerAuthExpressions )
      #set( $totalAuthExpression = "$totalAuthExpression $authExpr" )
      #if( $foreach.hasNext )
        #set( $totalAuthExpression = "$totalAuthExpression OR" )
      #end
    #end
  #end
  #if( $ownerAuthExpressionNames )
    $util.qr($authCondition.expressionNames.putAll($ownerAuthExpressionNames))
  #end
  #if( $ownerAuthExpressionValues )
    $util.qr($authCondition.expressionValues.putAll($ownerAuthExpressionValues))
  #end
  ## Set final expression if it has changed. **
  #if( $totalAuthExpression != "" )
    #set( $authCondition.expression = "($totalAuthExpression)" )
  #end
  ## [End] Collect Auth Condition **
#end


## [Start] Throw if unauthorized **
#if( !($isStaticGroupAuthorized == true || ($authCondition && $authCondition.expression != "")) )
  $util.unauthorized()
#end
## [End] Throw if unauthorized **

#if( $authCondition )
  #set( $condition = $authCondition )
  $util.qr($condition.put("expression", "$condition.expression AND attribute_exists(#id)"))
  $util.qr($condition.expressionNames.put("#id", "id"))
#else
  #set( $condition = {
  "expression": "attribute_exists(#id)",
  "expressionNames": {
      "#id": "id"
  }
} )
#end
#if( $versionedCondition )
  $util.qr($condition.put("expression", "($condition.expression) AND $versionedCondition.expression"))
  $util.qr($condition.expressionNames.putAll($versionedCondition.expressionNames))
  #set( $expressionValues = $util.defaultIfNull($condition.expressionValues, {}) )
  $util.qr($expressionValues.putAll($versionedCondition.expressionValues))
  #set( $condition.expressionValues = $expressionValues )
#end
{
  "version": "2017-02-28",
  "operation": "DeleteItem",
  "key": {
      "id": $util.dynamodb.toDynamoDBJson($ctx.args.input.id)
  },
  "condition": $util.toJson($condition)
}